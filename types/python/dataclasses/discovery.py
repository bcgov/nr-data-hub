# generated by datamodel-codegen:
#   filename:  discovery.schema.json
#   timestamp: 2024-04-11T19:00:09+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, EmailStr, Field, conint


class DataQualityMetrics(BaseModel):
    accuracy: Optional[float] = Field(
        None,
        description='Percentage of correct values in the dataset compared to the total number of values.',
    )
    completeness: Optional[float] = Field(
        None, description='Percentage of missing values in the dataset.'
    )
    timeliness: Optional[int] = Field(
        None,
        description='Frequency at which data is updated or refreshed to reflect the most recent information, expressed in minutes.',
    )
    duplication: Optional[float] = Field(
        None, description='Percentage of duplicated records in the dataset.'
    )


class Technology(BaseModel):
    name: str = Field(..., description='Name of the technology')
    version: str = Field(..., description='Version of the technology')


class Tag(BaseModel):
    key: str
    value: str


class Edge(BaseModel):
    origin_node: float = Field(
        ...,
        description='Index of the origin node of the edge in the flowchart, zero-indexed',
    )
    destination_node: float = Field(
        ...,
        description='Index of the destination node of the edge in the flowchart, zero-indexed',
    )
    text: str = Field(
        ..., description='Textual information to display on the edge of the flowchart'
    )


class Flowchart(BaseModel):
    root: conint(ge=0) = Field(
        ..., description='Zero indexed root node of the flowchart'
    )
    nodes: List[str] = Field(..., description='Nodes of the flowchart')
    edges: List[Edge] = Field(
        ...,
        description='Representation of each edge in the flowchart, including direction and textual information to display',
    )


class User(BaseModel):
    name: str = Field(..., description='Name of the user')
    email: EmailStr = Field(..., description='Email of the user')


class Users(BaseModel):
    __root__: List[User]


class SecurityClassification(Enum):
    Protected_A = 'Protected A'
    Protected_B = 'Protected B'
    Protected_C = 'Protected C'


class Column(BaseModel):
    name: str = Field(..., description='Column name')
    type: str = Field(..., description='Column data type')
    precision: Optional[str] = Field(
        None, description='Precision of the column (optional)'
    )
    description: str = Field(..., description='Description of the column')
    security_classification: SecurityClassification = Field(
        ..., description='Security classification of the column'
    )
    nullable: bool = Field(
        ..., description='Flag to indicate if the column is nullable'
    )


class StorageDescriptorItem(BaseModel):
    table_name: str = Field(
        ..., description='Name of the table as it is defined in the source database'
    )
    schema_name: str = Field(
        ..., description='Name of the schema as it is defined in the source database'
    )
    columns: List[Column] = Field(
        ...,
        description='Relational data storage description at a column granularity',
        min_items=1,
    )


class DataDiscoverySchema(BaseModel):
    source_system: str = Field(
        ...,
        description='Acronym for the source system providing the data, as it is defined in IRS',
    )
    agency: str = Field(
        ..., description='Acronym for the agency or ministry that owns the dataset'
    )
    business: str = Field(
        ..., description='Business domain or area responsible for the data'
    )
    data_custodian: Users = Field(..., description='Data custodian(s) of the dataset')
    data_owner: Optional[Users] = Field(
        None, description='Data owner(s) of the dataset'
    )
    data_specialist: Optional[Users] = Field(
        None, description='Data specialist(s) of the dataset'
    )
    data_quality_metrics: DataQualityMetrics = Field(
        ...,
        description='Quantified information pertaining to the quality of the data observed in the dataset.',
    )
    description: str = Field(..., description='Description of the dataset')
    security_classification: SecurityClassification = Field(
        ..., description='Security classification of the dataset'
    )
    technology: Technology = Field(
        ..., description='Description of the underlying technology of the dataset'
    )
    tags: Optional[List[Tag]] = Field(
        None, description='Tags of the dataset, defined as key-value pairs'
    )
    categories: Optional[List[str]] = Field(
        None, description='Categories to define the dataset'
    )
    storage_descriptor: List[StorageDescriptorItem] = Field(
        ..., description='Relational data storage description at a table granularity'
    )
    column_mapping: Dict[str, Any] = Field(
        ...,
        description="Object mapping source system columns as defined in the storage_descriptor to those of the MVD. Each key should have the form 'schema_name.table_name.column'",
    )
    extraction_query: str = Field(
        ...,
        description='Extraction query used to retrieve target data from the source system',
    )
    flowchart: Optional[Flowchart] = Field(
        None, description='Graph representation of the flowchart'
    )
